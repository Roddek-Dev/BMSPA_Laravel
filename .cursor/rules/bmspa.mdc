---
description: 
globs: 
alwaysApply: false
---
Cursor Rules: Proyecto Music Barber & Spa (Contexto General y Migración)
Objetivo Principal del Proyecto:

Migrar y evolucionar el sistema "Music Barber & Spa" desde una aplicación Spring Boot existente a una nueva arquitectura con un backend en formato API REST.
Este API REST servirá como núcleo para un frontend web y una aplicación móvil.
El sistema gestiona citas, servicios, productos, inventario, clientes, personal, sucursales, pagos y promociones para una barbería/spa.
Contexto de Migración (Desde Spring Boot / Java):

Entender la Lógica Existente:

Al migrar funcionalidades, referirse a la estructura del proyecto Spring (roddek-dev-beta_barbermusicspa.txt) para comprender la lógica de negocio implementada en controladores, servicios y modelos Java.
Prestar atención a cómo se manejaban las relaciones entre entidades (ej. Agendamiento con Usuario, Servicio, Sucursal, Personal).
Identificar la lógica de negocio compleja que necesite ser traducida fielmente (ej. cálculo de precios finales, estados de agendamientos/órdenes, gestión de stock).
Mapeo de Conceptos:

Modelos/Entidades Spring (.java en com.sena.barberspa.model): Estos representan las estructuras de datos centrales. La nueva implementación deberá tener equivalentes que se alineen con la nueva base de datos proporcionada.
Controladores Spring (.java en com.sena.barberspa.controller): Definían los endpoints y orquestaban las respuestas. La nueva API REST deberá ofrecer endpoints equivalentes o mejorados.
Servicios Spring (.java en com.sena.barberspa.service): Contenían la lógica de negocio principal. Esta lógica es crucial y debe ser reimplementada cuidadosamente.
Repositorios Spring (JPA): Manejaban la interacción con la base de datos. La nueva implementación usará los mecanismos de acceso a datos del nuevo framework.
Consideraciones Específicas de Migración:

Autenticación y Autorización: El sistema Spring usaba Spring Security y OAuth2. La nueva API necesitará un sistema robusto similar para proteger los endpoints y gestionar roles, se usara JWT y OAuth2 en conjunto (CLIENTE, EMPLEADO, ADMIN_GENERAL, ADMIN_SUCURSAL, etc.).
Manejo de Errores: Inspirarse en GlobalExceptionHandler.java para un manejo de errores centralizado y consistente en la nueva API.
Pasarelas de Pago: La lógica de integración con MercadoPago y PayPal deberá ser portada o reimplementada.
Servicio de Email y Notificaciones: Funcionalidades como el envío de recordatorios (RecordatorioController.java, EmailService.java) son clave.
Principios Clave para la Nueva API Backend:

Diseño RESTful:

Utilizar verbos HTTP estándar (GET, POST, PUT, DELETE, PATCH) de manera semántica.
Diseñar URLs claras, consistentes y predecibles para los recursos.
Utilizar códigos de estado HTTP apropiados para indicar el resultado de las operaciones.
Formato de datos JSON para las solicitudes y respuestas.
Modularidad y Reutilización:

Organizar el código en módulos lógicos (ej., gestión de usuarios, gestión de agendamientos, gestión de inventario).
Favorecer la creación de componentes de servicio reutilizables.
Seguridad Primero:

Implementar autenticación robusta (ej. tokens JWT).
Gestionar la autorización basada en roles definidos en la tabla usuarios y personal.
Validar todas las entradas del usuario para prevenir vulnerabilidades (XSS, inyección SQL, etc.).
Considerar la encriptación de datos sensibles.
Manejo de Datos y Base de Datos:

La interacción con la base de datos debe seguir la nueva estructura proporcionada (ej., tablas usuarios, personal, productos, servicios, agendamientos, ordenes, sucursales, etc.).
Prestar especial atención a las relaciones entre tablas (FKs) y las reglas de eliminación/actualización en cascada o restrictivas.
Implementar borrado lógico (deleted_at) donde esté definido.
Documentación de la API:

Mantener una documentación clara de los endpoints (ej., usando OpenAPI/Swagger) que detalle parámetros, cuerpos de solicitud/respuesta y códigos de estado.
Rendimiento y Escalabilidad:
Optimizar las consultas a la base de datos.
Considerar mecanismos de caché donde sea apropiado.
Diseñar para la concurrencia, pensando en múltiples usuarios (clientes, personal) accediendo al sistema.
Manejo de Archivos/Imágenes:

El sistema maneja imágenes para usuarios, productos, servicios y sucursales (imagen_path). Implementar una solución robusta para la carga y servicio de estos archivos.
Funcionalidades Centrales a Considerar (Basado en Documento IEEE 830 y Estructura Spring):

Gestión de Usuarios y Personal:
Registro, login (con email/password, y potencialmente OAuth2 como en Spring).
Roles (rol en usuarios, tipo_personal en personal).
Perfiles de usuario y personal.
Gestión de estado (ACTIVO, INACTIVO, etc.).
Gestión de Catálogo:
Administración de productos (con stock, SKU).
Administración de servicios (con duración, especialidad requerida).
Gestión de categorias (para productos y servicios).
Gestión de especialidades del personal.
Gestión de Sucursales:
Información detallada de sucursales (dirección, contacto, geolocalización).
Horarios de atención (horarios_sucursal, excepciones_horario_sucursal).
Asignación de servicios a sucursales (servicio_sucursal) y personal a sucursales (personal.sucursal_asignada_id).
Proceso de Agendamiento:
Creación, consulta, modificación y cancelación de agendamientos.
Vinculación con cliente_usuario_id, personal_id, servicio_id, sucursal_id.
Cálculo de fecha_hora_fin basado en duracion_minutos del servicio.
Manejo de estados del agendamiento (PROGRAMADA, CONFIRMADA, CANCELADA, etc.).
Proceso de Órdenes (para productos):
Creación y gestión de ordenes y detalle_ordenes.
Cálculo de subtotales, descuentos, impuestos y total.
Gestión de estados de la orden (PENDIENTE_PAGO, PAGADA, etc.).
Direcciones de envío.
Pagos:
Integración con pasarelas de pago para ordenes y agendamientos.
Registro de transacciones_pago.
Promociones:
Gestión de promociones (códigos, descuentos, fechas, límites de uso).
Aplicación a productos (producto_promocion) y servicios (promocion_servicio).
Notificaciones y Recordatorios:
Creación y envío de recordatorios para agendamientos.
Múltiples canales (EMAIL, SMS, PUSH_NOTIFICATION).
Reseñas:
Sistema de reseñas y calificaciones para servicios, productos, personal.
Preferencias de Usuario:
musica_preferencia_navegacion_id.
sucursal_preferida_id.
Consideraciones Generales para la IA (Cursor):

Priorizar la lógica de negocio: Asegurar que la lógica de negocio del sistema Spring se traduzca correctamente y funcione según los requisitos.
Consistencia: Mantener un estilo de código y convenciones de nomenclatura consistentes.
Pruebas: Recordar la importancia de las pruebas unitarias e de integración para asegurar la calidad.
Iteración: El desarrollo será iterativo. Estar preparado para refactorizar y mejorar el código a medida que el proyecto avanza.
